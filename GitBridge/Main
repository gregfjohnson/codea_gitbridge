-----------------------------------------------------------------------------
-- Copyright (c) Greg Johnson, Gnu Public Licence v. 2.0.
-----------------------------------------------------------------------------
gitBridgeVersion = "0.1.1"

function setup()
    printf("GitBridge %s", gitBridgeVersion)

    parameter.boolean('Send_or_Receive',   false)
    parameter.boolean('Copy_projects_now', false)
    
    local initialHost = readProjectData('host', '192.168.1.1')
    local initialPort = tostring(readProjectData('port', '10000')):match('([%d]+)')
    -- to set your IP address manually:
    -- initialHost = '192.18.3.5'
    -- initialPort = '12345'
    
    parameter.text('host_port', initialHost..':'..initialPort)

    local initialProjectList = readProjectData('projects', 'Project1\nProject2')
    -- to set your project list manually:
    -- initialProjectList = 'MyProject1\nMyProject2\nMyProject3'
    
    parameter.text('projects', initialProjectList)

    socket = require 'socket'
end

function draw()
    host, port = host_port:match('([^%s:]+)[%s:]+(%d+)')
    
    local storedHost = readProjectData('host')
    if storedHost ~= host then
        saveProjectData('host', host)
    end
    
    local storedPort = readProjectData('port')
    if storedPort ~= port then
        saveProjectData('port', port)
    end
    
    local storedProjectList = readProjectData('projects')
    if storedProjectList ~= projects then
        saveProjectData('projects', projects)
    end
        
    if Copy_projects_now then
        
        local projectList = {}
        for projectName in projects:gmatch('([%S]+)') do
            table.insert(projectList, projectName)
        end
        
        local okSoFar = true
        
        for i = 1, #projectList do
            local project = projectList[i]
            local tabList = listProjectTabs(project)
            
            if #tabList == 0 then
                print(string.format('error on project "%s"', project))

            else
                for j = 1, #tabList do
                    local tab   = tabList[j]

                    if Send_or_Receive then
                        okSoFar = receiveFromGit(project, tab)

                        if okSoFar ~= false then
                            okSoFar = true
                        end
                    else
                        okSoFar = sendToGit(project, tab)
                    end

                    if not okSoFar then break end
                end
                if not okSoFar then break end
            end
        end

        Copy_projects_now = false
    end
end

function sendToGit(project, tab)
    local sent = false
    local error = nil

    local fname = project .. ':' .. tab
    local contents = readProjectTab(fname)

    local sock = socket.tcp()
    sock:settimeout(1.0)
    local connected, err = sock:connect(host, tonumber(port))
    
    if connected == 1 then
        sock:setoption('keepalive', true)
        
        sent, error = sendFile(sock, project, tab, contents)
    end

    sock:close()

    if sent then
        printf("%s:%s Done", project, tab)
    else
        printf("File %s:%s not sent:  %s", project, tab, error)
    end
    
    return sent
end

function receiveFromGit(project, tab)
    local sent  = false
    local error = nil

    local fname = project .. ':' .. tab
    local previousLocalContents = readProjectTab(fname)
    
    local sock = socket.tcp()
    sock:settimeout(1.0)
    local connected, err = sock:connect(host, tonumber(port))

    if connected == 1 then
        sock:setoption('keepalive', true)
        
        sent, error = receiveFileBackupLocalVersion(sock,
                                                    project, tab,
                                                    previousLocalContents,
                                                    needFile)
    end

    sock:close()
    
    if sent == false then
        print(string.format('error receiving "%s:%s:  %s"', project, tab, error))
        
    elseif sent == true then
        print(string.format("%s:%s Done", project, tab))
        
    elseif type(sent) == 'string' then
        saveProjectTab(project..':'..tab, sent)

        printf("%s:%s Done", project, tab)
    end
    
    return sent
end
