-----------------------------------------------------------------------------
-- Copyright (c) Greg Johnson, Gnu Public Licence v. 2.0.
-----------------------------------------------------------------------------

-- C-style printf(), but outputs a final '\n', since I don't know how to get io.write()
-- to work with Codea..
--
function printf(fmt, ...)
    print(string.format(fmt, ...))
end

-- read a line from data source 'sock'.
-- sock must have a method named receive() that
-- returns a string on success and
-- returns nil, errorString on failure.
--
function receiveLine(sock)
    local result, err = sock:receive()
    if err then
        print(string.format('receive error:  %s\n', err))
        result = nil
    end
    return result
end

-- count the number of linefeeds in the string s
--
function linefeedCount(s)
    return #s:gsub('[^\n]', '')
end

-- CRC using Koopman polynomial

local v5_3_or_greater = (5.3 <= tonumber(_VERSION:match('([.%d]+)')))

local xor, rshift_24

if v5_3_or_greater then
    rshift_24 = loadstring('local function fn(x) return x >> 24 end; return fn')()

    xor = loadstring('local function fn(xFirst, xSecond) return xFirst ~ xSecond end; return fn')()

else
    rshift_24 = loadstring('local function fn(x) return math.floor(x / 16777216) end; return fn')()

    xor = loadstring(
        [[
            -- a little bit of Y-combinator-ish goofiness to do
            -- recursion without using non-local identifiers..

            local function fn(xor, xFirst, xSecond)
                if xFirst  == 0 then return xSecond end
                if xSecond == 0 then return xFirst  end

                local lastBit = (xFirst % 2) == (xSecond % 2) and 0 or 1

                return lastBit + 2 * xor(xor, math.floor(xFirst/2), math.floor(xSecond/2))
            end

            return function(x,y) return fn(fn, x,y) end
        ]]
    )()
end

local crcTable

-- calculate 32-bit CRC with Koopman polynomial 0x132583499.
-- non-reversed, with initial value of zero.
--
function messageCrc(data)
    local result = 0
    for i = 1, #data do
        local rightShiftCrc = rshift_24(result)
        local crcXorByte = xor(result, data:sub(i, i):byte()) % 256
        
        result = xor(rightShiftCrc, crc32Table[crcXorByte + 1])
    end

  return result
end

-- Use polynomial 0x132583499.  This is CRC-32K(2) from:
--     Koopman, Philip (July 2002). "32-Bit Cyclic Redundancy Codes for
--     Internet Applications" (PDF). The International Conference on Dependable
--     Systems and Networks: 459-468.
--
crc32Table = {
    0x00000000, 0x32583499, 0x64b06932, 0x56e85dab, 0xc960d264, 0xfb38e6fd, 0xadd0bb56, 0x9f888fcf,
    0xa0999051, 0x92c1a4c8, 0xc429f963, 0xf671cdfa, 0x69f94235, 0x5ba176ac, 0x0d492b07, 0x3f111f9e,
    0x736b143b, 0x413320a2, 0x17db7d09, 0x25834990, 0xba0bc65f, 0x8853f2c6, 0xdebbaf6d, 0xece39bf4,
    0xd3f2846a, 0xe1aab0f3, 0xb742ed58, 0x851ad9c1, 0x1a92560e, 0x28ca6297, 0x7e223f3c, 0x4c7a0ba5,
    0xe6d62876, 0xd48e1cef, 0x82664144, 0xb03e75dd, 0x2fb6fa12, 0x1deece8b, 0x4b069320, 0x795ea7b9,
    0x464fb827, 0x74178cbe, 0x22ffd115, 0x10a7e58c, 0x8f2f6a43, 0xbd775eda, 0xeb9f0371, 0xd9c737e8,
    0x95bd3c4d, 0xa7e508d4, 0xf10d557f, 0xc35561e6, 0x5cddee29, 0x6e85dab0, 0x386d871b, 0x0a35b382,
    0x3524ac1c, 0x077c9885, 0x5194c52e, 0x63ccf1b7, 0xfc447e78, 0xce1c4ae1, 0x98f4174a, 0xaaac23d3,
    0xfff46475, 0xcdac50ec, 0x9b440d47, 0xa91c39de, 0x3694b611, 0x04cc8288, 0x5224df23, 0x607cebba,
    0x5f6df424, 0x6d35c0bd, 0x3bdd9d16, 0x0985a98f, 0x960d2640, 0xa45512d9, 0xf2bd4f72, 0xc0e57beb,
    0x8c9f704e, 0xbec744d7, 0xe82f197c, 0xda772de5, 0x45ffa22a, 0x77a796b3, 0x214fcb18, 0x1317ff81,
    0x2c06e01f, 0x1e5ed486, 0x48b6892d, 0x7aeebdb4, 0xe566327b, 0xd73e06e2, 0x81d65b49, 0xb38e6fd0,
    0x19224c03, 0x2b7a789a, 0x7d922531, 0x4fca11a8, 0xd0429e67, 0xe21aaafe, 0xb4f2f755, 0x86aac3cc,
    0xb9bbdc52, 0x8be3e8cb, 0xdd0bb560, 0xef5381f9, 0x70db0e36, 0x42833aaf, 0x146b6704, 0x2633539d,
    0x6a495838, 0x58116ca1, 0x0ef9310a, 0x3ca10593, 0xa3298a5c, 0x9171bec5, 0xc799e36e, 0xf5c1d7f7,
    0xcad0c869, 0xf888fcf0, 0xae60a15b, 0x9c3895c2, 0x03b01a0d, 0x31e82e94, 0x6700733f, 0x555847a6,
    0xcdb0fc73, 0xffe8c8ea, 0xa9009541, 0x9b58a1d8, 0x04d02e17, 0x36881a8e, 0x60604725, 0x523873bc,
    0x6d296c22, 0x5f7158bb, 0x09990510, 0x3bc13189, 0xa449be46, 0x96118adf, 0xc0f9d774, 0xf2a1e3ed,
    0xbedbe848, 0x8c83dcd1, 0xda6b817a, 0xe833b5e3, 0x77bb3a2c, 0x45e30eb5, 0x130b531e, 0x21536787,
    0x1e427819, 0x2c1a4c80, 0x7af2112b, 0x48aa25b2, 0xd722aa7d, 0xe57a9ee4, 0xb392c34f, 0x81caf7d6,
    0x2b66d405, 0x193ee09c, 0x4fd6bd37, 0x7d8e89ae, 0xe2060661, 0xd05e32f8, 0x86b66f53, 0xb4ee5bca,
    0x8bff4454, 0xb9a770cd, 0xef4f2d66, 0xdd1719ff, 0x429f9630, 0x70c7a2a9, 0x262fff02, 0x1477cb9b,
    0x580dc03e, 0x6a55f4a7, 0x3cbda90c, 0x0ee59d95, 0x916d125a, 0xa33526c3, 0xf5dd7b68, 0xc7854ff1,
    0xf894506f, 0xcacc64f6, 0x9c24395d, 0xae7c0dc4, 0x31f4820b, 0x03acb692, 0x5544eb39, 0x671cdfa0,
    0x32449806, 0x001cac9f, 0x56f4f134, 0x64acc5ad, 0xfb244a62, 0xc97c7efb, 0x9f942350, 0xadcc17c9,
    0x92dd0857, 0xa0853cce, 0xf66d6165, 0xc43555fc, 0x5bbdda33, 0x69e5eeaa, 0x3f0db301, 0x0d558798,
    0x412f8c3d, 0x7377b8a4, 0x259fe50f, 0x17c7d196, 0x884f5e59, 0xba176ac0, 0xecff376b, 0xdea703f2,
    0xe1b61c6c, 0xd3ee28f5, 0x8506755e, 0xb75e41c7, 0x28d6ce08, 0x1a8efa91, 0x4c66a73a, 0x7e3e93a3,
    0xd492b070, 0xe6ca84e9, 0xb022d942, 0x827aeddb, 0x1df26214, 0x2faa568d, 0x79420b26, 0x4b1a3fbf,
    0x740b2021, 0x465314b8, 0x10bb4913, 0x22e37d8a, 0xbd6bf245, 0x8f33c6dc, 0xd9db9b77, 0xeb83afee,
    0xa7f9a44b, 0x95a190d2, 0xc349cd79, 0xf111f9e0, 0x6e99762f, 0x5cc142b6, 0x0a291f1d, 0x38712b84,
    0x0760341a, 0x35380083, 0x63d05d28, 0x518869b1, 0xce00e67e, 0xfc58d2e7, 0xaab08f4c, 0x98e8bbd5,
}
